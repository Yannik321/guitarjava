/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Menu.java
 *
 * Created on 26/10/2010, 09:43:17
 */

package guitarjava.gui;

import guitarjava.game.Music;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;

/**
 *
 * @author Lucas
 */
public class Menu extends javax.swing.JFrame
{
    public static final int CLOSED_TO_REQUEST_REFRESH = 190;
    public static final int CLOSED_TO_PLAY = 191;
    
    /** Creates new form Menu */
    public Menu()
    {
        musicsListModel = new DefaultListModel();
        musicLevelsListModel = new DefaultListModel();
        initComponents();
        centralize();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        upperPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        lowerPanel = new javax.swing.JPanel();
        goButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        musicLevelsList = new javax.swing.JList();
        scrollPane1 = new javax.swing.JScrollPane();
        musicsList = new javax.swing.JList();
        highscorePanel = new javax.swing.JPanel();
        highscoreLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 400));
        setResizable(false);

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleLabel.setText("Select one music to play:");
        upperPanel.add(titleLabel);

        getContentPane().add(upperPanel, java.awt.BorderLayout.PAGE_START);

        goButton.setText("Let's go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });
        lowerPanel.add(goButton);

        refreshButton.setText("Refresh list form disk");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        lowerPanel.add(refreshButton);

        getContentPane().add(lowerPanel, java.awt.BorderLayout.PAGE_END);

        centerPanel.setLayout(new java.awt.BorderLayout());

        musicLevelsList.setModel(musicLevelsListModel);
        musicLevelsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane.setViewportView(musicLevelsList);

        centerPanel.add(scrollPane, java.awt.BorderLayout.CENTER);

        musicsList.setModel(musicsListModel);
        musicsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        musicsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                musicsListValueChanged(evt);
            }
        });
        scrollPane1.setViewportView(musicsList);

        centerPanel.add(scrollPane1, java.awt.BorderLayout.PAGE_START);

        highscoreLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        highscoreLabel.setForeground(new java.awt.Color(0, 255, 0));
        highscoreLabel.setText("Highscores");
        highscorePanel.add(highscoreLabel);

        centerPanel.add(highscorePanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        if (playingMusic != null)
            playingMusic.stop();

        for (WindowListener gui : getWindowListeners())
                    gui.windowClosed(new WindowEvent(this, CLOSED_TO_REQUEST_REFRESH));
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void musicsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_musicsListValueChanged
        if (!evt.getValueIsAdjusting())
        {
            showMusicHighscore();
            showMusicDifficulties();
            playMusic();
        }
    }//GEN-LAST:event_musicsListValueChanged

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        String musicString = (String) musicsListModel.elementAt(musicsList.getSelectedIndex());
        String musicName = musicString.substring(musicString.indexOf("<music>") + 7, musicString.indexOf("</music>"));

        List<Music> mapMusics = musics.get(musicName);

        musicToPlay = mapMusics.get(musicLevelsList.getSelectedIndex());

        if (playingMusic != null)
            playingMusic.stop();

        for (WindowListener gui : getWindowListeners())
            gui.windowClosed(new WindowEvent(this, CLOSED_TO_PLAY));
    }//GEN-LAST:event_goButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel highscoreLabel;
    private javax.swing.JPanel highscorePanel;
    private javax.swing.JPanel lowerPanel;
    private javax.swing.JList musicLevelsList;
    private javax.swing.JList musicsList;
    private javax.swing.JButton refreshButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel upperPanel;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel musicsListModel;
    private DefaultListModel musicLevelsListModel;
    private Map<String, List<Music>> musics;
    private Music musicToPlay;
    private Music sampleMusic;
    private Music playingMusic;

    public void translateToMusicsList(Map<String, List<Music>> musics)
    {
        this.musics = musics;
        
        musicsListModel.clear();

        for (Map.Entry<String, List<Music>> entry : musics.entrySet())
        {
            Music representant = entry.getValue().get(0);

            if (representant != null)
                musicsListModel.addElement("<html><b><music>" + representant.getName() + "</music></b> - " + representant.getArtist() + " - " +
                        representant.getAlbum() + " - " + representant.getYear() + "</html>");
        }

        musicsList.setSelectedIndex(0);
        showMusicDifficulties();
    }

    public Music getMusicToPlay()
    {
        return musicToPlay;
    }

    private void showMusicHighscore()
    {
        String musicString = (String) musicsListModel.elementAt(musicsList.getSelectedIndex());
        String musicName = musicString.substring(musicString.indexOf("<music>") + 7, musicString.indexOf("</music>"));

        List<Music> mapMusics = musics.get(musicName);
        if (mapMusics.size() > 0)
        {
            Music music = mapMusics.get(0);
            highscoreLabel.setText("Music highscore: " + music.getHighPlayer() + "(" + music.getHighScore() + ")");
        }
        else
            highscoreLabel.setText("Highscores");
    }

    private void showMusicDifficulties()
    {
        String musicString = (String) musicsListModel.elementAt(musicsList.getSelectedIndex());
        String musicName = musicString.substring(musicString.indexOf("<music>") + 7, musicString.indexOf("</music>"));

        List<Music> mapMusics = musics.get(musicName);
        if (mapMusics != null)
        {
            musicLevelsListModel.clear();

            for (Music music : mapMusics)
            {
                musicLevelsListModel.addElement(music.getDifficulty());
            }
        }

        musicLevelsList.setSelectedIndex(0);
    }

    private void playMusic()
    {
        String musicString = (String) musicsListModel.elementAt(musicsList.getSelectedIndex());
        String musicName = musicString.substring(musicString.indexOf("<music>") + 7, musicString.indexOf("</music>"));

        List<Music> mapMusics = musics.get(musicName);

        sampleMusic = mapMusics.get(musicLevelsList.getSelectedIndex());
        Thread samplePlay = new Thread()
        {
            @Override
            public void run()
            {
                try
                {
                    if (playingMusic != null)
                    {
                        playingMusic.stop();
                    }

                    if (sampleMusic == playingMusic)
                        return;

                    playingMusic = sampleMusic;
                    sampleMusic.reopen();
                    sampleMusic.play();
                }
                catch (Exception e)
                {
                    // TODO
                }
            }
        };

        samplePlay.start();
    }

    private void centralize()
    {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((dimension.width - this.getWidth()) / 2, (dimension.height - this.getHeight()) / 2);
    }
}
